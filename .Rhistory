fit(data=youtube) %>%
tidy() %>%
filter(p.value<0.05)
step_log(all_vars())
step_log(all_vars(youtube))
View(youtube)
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous()+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.position = "none")+
ylab("View Count")+
xlab("Like Count")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels=scales::number_format(scale=1000))+
scale_x_log10(labels=scales::number_format(scale=1000))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10()+
scale_x_log10(labels=scales::number_format(scale=1000))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10()+
scale_x_log10()+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
p1+p2
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels=scales::number_format(scale=1000))+
scale_x_log10(labels=scales::number_format(scale=1000))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("") +
xlab("Like Count") -> p2
p1+p2
youtube_workflow %>%
fit(data=youtube) %>%
tidy() %>%
filter(p.value<0.05)
youtube_workflow %>%
fit(data=youtube) %>%
tidy() %>%
filter(p.value<0.05)->res
res
youtube_workflow %>%
fit(data=youtube)
youtube_workflow %>%
fit(data=youtube) -> res
res
res %>% extract_fit_parsnip()
res %>% extract_fit_engine()
res %>% extract_model()
res %>% extract_fit_engine()
res %>% extract_fit_engine() %>% summary()
res %>% extract_fit_engine() %>% summary()
?lm()
?step_interact
# Workflow with interaction term:
# Define recipe:
youtube_recipe <- recipe(view_count~.,data=for_modelling) %>%
step_interact(terms = ~ view_count:brand)
youtube_recipe
youtube_recipe %>% prep()
youtube_recipe %>% prep() %>% bake(new_data=NULL)
# Workflow with interaction term:
# Define recipe:
youtube_recipe <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand)
youtube_recipe %>% prep() %>% bake(new_data=NULL)
# Workflow with interaction term:
# Define recipe:
youtube_recipe <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand) %>%
step_interact(terms = ~ view_count:starts_with("brand"))
youtube_recipe %>% prep() %>% bake(new_data=NULL)
# Workflow with interaction term:
# Define recipe:
youtube_recipe <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand) %>%
step_interact(terms = ~ view_count:starts_with("brand"))
# Specify model:
lm_mod <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow  <- workflow() %>%
add_model(lm_mod) %>%
add_recipe(youtube_recipe)
youtube_workflow %>%
fit(data=youtube) -> res
res %>%
extract_fit_engine() %>%
summary()
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_normalize(all_numeric())
youtube_recipe1 %>% prep() %>% bake(new_data=NULL)
youtube_recipe1 %>% prep() %>% bake(new_data=NULL) %>% View()
# Specify model:
lm_mod1 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow1  <- workflow() %>%
add_model(lm_mod1) %>%
add_recipe(youtube_recipe)
youtube_workflow %>%
fit(data=youtube) -> res
```{r}
res %>%
extract_fit_engine() %>%
summary()
youtube %>% select(brand, funny,show_product_quickly,patriotic,celebrity, danger, animals,use_sex,view_count,like_count, dislike_count) -> for_modelling
library(tidymodels)
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_normalize(all_numeric())
# Specify model:
lm_mod1 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow1  <- workflow() %>%
add_model(lm_mod1) %>%
add_recipe(youtube_recipe1)
youtube_workflow %>%
fit(data=youtube) -> res1
res %>%
extract_fit_engine() %>%
summary()
res1 %>%
extract_fit_engine() %>%
summary()
res1 %>%
extract_fit_engine() %>%
summary()
for_modelling
res1
youtube %>% select(brand, funny,show_product_quickly,patriotic,celebrity, danger, animals,use_sex,view_count,like_count, dislike_count) -> for_modelling
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_normalize(all_numeric())
# Specify model:
lm_mod1 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow1  <- workflow() %>%
add_model(lm_mod1) %>%
add_recipe(youtube_recipe1)
youtube_workflow1 %>%
fit(data=youtube) -> res1
res1 %>%
extract_fit_engine() %>%
summary()
# Workflow with interaction term:
# Define recipe:
youtube_recipe2 <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand) %>%
step_interact(terms = ~ view_count:starts_with("brand"))
# Specify model:
lm_mod2 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow  <- workflow() %>%
add_model(lm_mod2) %>%
add_recipe(youtube_recipe)
youtube_workflow %>%
fit(data=youtube) -> res2
res2 %>%
extract_fit_engine() %>%
summary()
# Workflow with interaction term:
# Define recipe:
youtube_recipe2 <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand) %>%
step_interact(terms = ~ view_count:starts_with("brand"))
# Specify model:
lm_mod2 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow  <- workflow() %>%
add_model(lm_mod2) %>%
add_recipe(youtube_recipe)
youtube_workflow %>%
fit(data=youtube) -> res2
res2 %>%
extract_fit_engine() %>%
summary()
res2
# First Model
res2 %>%
extract_fit_engine()->x
# ANOVA Test of variance:
aov(x,y)
# Second Model
res1 %>%
extract_fit_engine()->y
# ANOVA Test of variance:
aov(x,y)
res2 %>%
extract_fit_engine() %>%
summary()
# ANOVA Test of variance:
anova(x,y)
# First Model
res2 %>%
extract_fit_engine() ->y
# Second Model
res1 %>%
extract_fit_engine()->x
# ANOVA Test of variance:
anova(x,y)
AIC(x,y)
AIC(x,y)
# Bake data set:
youtube_bootstrap <- recipe(view_count~.,data=for_modelling) %>%
step_normalize(all_numeric()) %>%
prep() %>%
bake()
# Bake data set:
youtube_bootstrap <- recipe(view_count~.,data=for_modelling) %>%
step_normalize(all_numeric()) %>%
prep() %>%
bake(new_data=NULL)
youtube_bootstrap
# generate bootstrapped intervals
doParallel::registerDoParallel()
reg_intervals(view_count~.,
data = youtube_bootstrap,
times=1000) -> bootstrapped_model
bootstrapped_model
F_hat <- youtube_bootstrap %>%
specify(view_count ~ brand) %>%
calculate(stat = "F")
null_dist <- youtube_bootstrap %>%
specify(view_count ~ brand) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
visualize(null_dist) +
shade_p_value(obs_stat = F_hat, direction = "greater")
visualize(null_dist) +
shade_p_value(obs_stat = F_hat, direction = "greater")+
theme_minimal()
null_dist %>%
get_p_value(obs_stat = F_hat, direction="greater")
null_dist %>%
get_p_value(obs_stat = F_hat, direction="lower")
null_dist %>%
get_p_value(obs_stat = F_hat, direction="less")
null_dist %>%
get_p_value(obs_stat = F_hat, direction="greater")
# Workflow with interaction term:
# Define recipe:
youtube_recipe2 <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand) %>%
step_interact(terms = ~ view_count:starts_with("brand"))
# Specify model:
lm_mod2 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow  <- workflow() %>%
add_model(lm_mod2) %>%
add_recipe(youtube_recipe)
youtube_workflow %>%
fit(data=youtube) -> res2
res2 %>%
extract_fit_engine() %>%
summary()
youtube %>%
select(brand,
funny,
show_product_quickly,
patriotic,
celebrity,
danger,
animals,
use_sex,
view_count,
like_count,
dislike_count) -> for_modelling
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_normalize(all_numeric())
# Specify model:
lm_mod1 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow1  <- workflow() %>%
add_model(lm_mod1) %>%
add_recipe(youtube_recipe1)
youtube_workflow1 %>%
fit(data=youtube) -> res1
bootstrapped_model
res1 %>%
extract_fit_engine() %>% performance::check_model()
res1 %>%
extract_fit_engine()
res1 %>%
extract_fit_engine()->tt
tt %>% performance::check_model()
var.test(view_count~brand,data=youtube)
# load Packages
pacman::p_load(tidyverse,corrplot,reactablefmtr,reactable,tidymodels)
# Load Data:
read.csv(file = "youtube.csv")->youtube
# Set theme Up:
theme_set(theme_void(base_family = "Verdana"))
#
theme_update(
axis.text.x = element_text(color = "black", face = "bold", size = 8,
angle=15,vjust=0.8,hjust=1),
axis.text.y = element_text(color = "black", size = 9, hjust = 1,
family = "Verdana"),
axis.line.x = element_line(color = "black", size = .5),
plot.background = element_rect(fill = "white", color = "white"))
#
#
# ## theme for horizontal charts
# theme_flip <-
#   theme(
#     axis.text.x = element_text(face = "plain", family = "Verdana", size = 22),
#     axis.text.y = element_text(face = "bold", family = "Verdana", size = 26),
#     panel.grid.major.x = element_line(color = "grey90", size = .6),
#     panel.grid.major.y = element_blank(),
#     legend.position = "top",
#     legend.text = element_text(family = "Verdana", size = 18),
#     legend.title = element_text(face = "bold", size = 18, margin = margin(b = 25))
#   )
#
# ## custom colors
my_pal <- rcartocolor::carto_pal(n = 8, name = "Bold")[c(1, 3, 7, 2,4,6,8,9,5,10)]
step_log()
youtube %>%
select(brand,
funny,
show_product_quickly,
patriotic,
celebrity,
danger,
animals,
use_sex,
view_count,
like_count,
dislike_count) -> for_modelling
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_log(all_numeric())
youtube_recipe1 %>% prep() %>% bake(new_data=NULL)
youtube_recipe1 %>% prep() %>% bake(new_data=NULL) %>% View
View(youtube)
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_log(all_numeric(),signed = TRUE)
youtube_recipe1 %>% prep() %>% bake(new_data=NULL) %>% View
# First Model
res2 %>%
extract_fit_engine() ->y
# load Packages
pacman::p_load(tidyverse,corrplot,reactablefmtr,reactable,tidymodels)
# load Packages
pacman::p_load(tidyverse,corrplot,reactablefmtr,reactable,tidymodels)
# Load Data:
read.csv(file = "youtube.csv")->youtube
View(youtube)
youtube %>% select(brand,view_count)
youtube %>% select(brand,view_count) %>% colSums(is.na())
youtube %>% select(brand,view_count) %>% colSums(is.na)
youtube %>% select(brand,view_count)
youtube %>%
select(brand,view_count) -> infer_test
infer_test %>%
specify(view_count~brand) %>%
hypothesise(null="independence")
infer_test %>%
specify(view_count~brand) %>%
hypothesise(null="independence") %>%
generate(reps=1000,type="permute")
infer_test %>%
specify(view_count~brand) %>%
hypothesise(null="independence") %>%
generate(reps=1000,type="permute") %>%
fit()
infer_test %>%
specify(view_count~brand) %>%
hypothesise(null="independence") %>%
generate(reps=1000,type="permute") %>%
fit() ->superbowl_fits
get_confidence_interval(
superbowl_fits,
point_estimate = observed_fit,
level = .95
)
infer_test %>%
specify(view_count~brand) %>%
hypothesise(null="independence") %>%
generate(reps=1000,type="permute") %>%
fit() ->superbowl_fits
visualise(superbowl_fits)
#
#
## theme for horizontal charts
theme_flip <-
theme(
axis.text.x = element_text(face = "plain", family = "Verdana", size = 22),
axis.text.y = element_text(face = "bold", family = "Verdana", size = 26),
panel.grid.major.x = element_line(color = "grey90", size = .6),
panel.grid.major.y = element_blank(),
legend.position = "top",
legend.text = element_text(family = "Verdana", size = 18),
legend.title = element_text(face = "bold", size = 18, margin = margin(b = 25))
)
## GGplot of performance by brand
tt %>%
ggplot(aes(reorder(brand,-l_to_v_ratio), l_to_v_ratio,fill=brand))+
geom_col(width=.8)+
scale_y_continuous(expand =c(0,0),label=scales::percent)+
scale_fill_manual(values = my_pal, guide="none")+
# theme(axis.text.x = element_text(angle=45,vjust=1,hjust=1))+
ylab("Like to Views Ratio")+
xlab("")+
coord_flip()
# Like to view ration
youtube %>% filter(year == 2020) %>%
select(brand, title, where(is.numeric)) %>%
na.omit() %>%
group_by(brand,title) %>%
summarise(l_to_v_ratio =like_count/view_count) %>%
mutate(label=scales::percent(l_to_v_ratio,accuracy = 0.01))-> tt
## GGplot of performance by brand
tt %>%
ggplot(aes(reorder(brand,-l_to_v_ratio), l_to_v_ratio,fill=brand))+
geom_col(width=.8)+
scale_y_continuous(expand =c(0,0),label=scales::percent)+
scale_fill_manual(values = my_pal, guide="none")+
# theme(axis.text.x = element_text(angle=45,vjust=1,hjust=1))+
ylab("Like to Views Ratio")+
xlab("")+
coord_flip()
# ## custom colors
my_pal <- rcartocolor::carto_pal(n = 8, name = "Bold")[c(1, 3, 7, 2,4,6,8,9,5,10)]
## GGplot of performance by brand
tt %>%
ggplot(aes(reorder(brand,-l_to_v_ratio), l_to_v_ratio,fill=brand))+
geom_col(width=.8)+
scale_y_continuous(expand =c(0,0),label=scales::percent)+
scale_fill_manual(values = my_pal, guide="none")+
# theme(axis.text.x = element_text(angle=45,vjust=1,hjust=1))+
ylab("Like to Views Ratio")+
xlab("")+
coord_flip()
#
theme_update(
axis.text.x = element_text(color = "black", face = "bold", size = 8,
angle=15,vjust=1,hjust=1),
axis.text.y = element_text(color = "black", size = 9, hjust = 1,
family = "Verdana"),
axis.line.x = element_line(color = "black", size = .5),
plot.background = element_rect(fill = "white", color = "white"))
#
#
## theme for horizontal charts
theme_flip <-
theme(
axis.text.x = element_text(face = "plain", family = "Verdana", size = 22),
axis.text.y = element_text(face = "bold", family = "Verdana", size = 26),
panel.grid.major.x = element_line(color = "grey90", size = .6),
panel.grid.major.y = element_blank(),
legend.position = "top",
legend.text = element_text(family = "Verdana", size = 18),
legend.title = element_text(face = "bold", size = 18, margin = margin(b = 25))
)
## GGplot of performance by brand
tt %>%
ggplot(aes(reorder(brand,-l_to_v_ratio), l_to_v_ratio,fill=brand))+
geom_col(width=.8)+
scale_y_continuous(expand =c(0,0),label=scales::percent)+
scale_fill_manual(values = my_pal, guide="none")+
# theme(axis.text.x = element_text(angle=45,vjust=1,hjust=1))+
ylab("Like to Views Ratio")+
xlab("")+
coord_flip()
