cell_fill(color = "#D9654B")
),
locations = cells_body(
# not needed if coloring all columns
rows = 4)
)
youtube %>%
group_by(brand) %>%
summarise(`Total Views` = sum(view_count,na.rm = TRUE),
`Total Likes` = sum(like_count,na.rm = TRUE),
`Total Dislikes` = sum(dislike_count,na.rm = TRUE),
`Total Comments`= sum(comment_count,na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric,scales::comma) %>%
rename(Brand=brand) %>%
gt() %>%
tab_header(
title = md("**Superbowl Ad Youtube Metrics by Brand**"),
subtitle = "From 2000-2022"
) %>%
tab_style(
style = list(
cell_fill(color = "green")
),
locations = cells_body(
# not needed if coloring all columns
rows = 4)
)
youtube %>%
group_by(brand) %>%
summarise(`Total Views` = sum(view_count,na.rm = TRUE),
`Total Likes` = sum(like_count,na.rm = TRUE),
`Total Dislikes` = sum(dislike_count,na.rm = TRUE),
`Total Comments`= sum(comment_count,na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric,scales::comma) %>%
rename(Brand=brand) %>%
gt() %>%
tab_header(
title = md("**Superbowl Ad Youtube Metrics by Brand**"),
subtitle = "From 2000-2022"
) %>%
tab_style(
style = list(
cell_fill(color = "midnightblue")
),
locations = cells_body(
# not needed if coloring all columns
rows = 4)
)
youtube %>%
group_by(brand) %>%
summarise(`Total Views` = sum(view_count,na.rm = TRUE),
`Total Likes` = sum(like_count,na.rm = TRUE),
`Total Dislikes` = sum(dislike_count,na.rm = TRUE),
`Total Comments`= sum(comment_count,na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric,scales::comma) %>%
rename(Brand=brand) %>%
gt() %>%
tab_header(
title = md("**Superbowl Ad Youtube Metrics by Brand**"),
subtitle = "From 2000-2022"
) %>%
tab_style(
style = list(
cell_fill(color = "cornflowerblue")
),
locations = cells_body(
# not needed if coloring all columns
rows = 4)
)
youtube %>%
group_by(brand) %>%
summarise(`Total Views` = sum(view_count,na.rm = TRUE),
`Total Likes` = sum(like_count,na.rm = TRUE),
`Total Dislikes` = sum(dislike_count,na.rm = TRUE),
`Total Comments`= sum(comment_count,na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric,scales::comma) %>%
rename(Brand=brand) %>%
gt() %>%
tab_header(
title = md("**Superbowl Ad Youtube Metrics by Brand**"),
subtitle = "From 2000-2022"
)
# Like to view ration
youtube %>% filter(year == 2020) %>%
select(brand, title, where(is.numeric)) %>%
na.omit() %>%
group_by(brand,title) %>%
summarise(l_to_v_ratio =like_count/view_count) %>%
mutate(label=scales::percent(l_to_v_ratio,accuracy = 0.01))-> tt
# Create DF for table
tt %>%
select(brand,l_to_v_ratio) %>%
rename(Brand = brand,
"Like to views ratio"= l_to_v_ratio)->for_table
# Create Table
reactable(
for_table,
pagination = FALSE,
defaultColDef = colDef(
cell = data_bars(for_table,
number_fmt = scales::percent_format(accuracy = .11))
)
)
# Like to view ration
youtube %>% filter(year == 2020) %>%
select(brand, title, where(is.numeric)) %>%
na.omit() %>%
group_by(brand,title) %>%
summarise(l_to_v_ratio =like_count/view_count) %>%
mutate(label=scales::percent(l_to_v_ratio,accuracy = 0.01))-> tt
# Create DF for table
tt %>%
select(brand,l_to_v_ratio) %>%
rename(Brand = brand,
"Like to views ratio"= l_to_v_ratio)->for_table
# Create Table
reactable(
for_table,
pagination = FALSE,
defaultColDef = colDef(
cell = data_bars(for_table,
number_fmt = scales::percent_format(accuracy = .11))
)
)
# Like to view ration
youtube %>% filter(year == 2020) %>%
select(brand, title, where(is.numeric)) %>%
na.omit() %>%
group_by(brand,title) %>%
summarise(l_to_v_ratio =like_count/view_count) %>%
mutate(label=scales::percent(l_to_v_ratio,accuracy = 0.01)) %>%
ungroup() -> tt
# Create DF for table
tt %>%
select(brand,l_to_v_ratio) %>%
rename(Brand = brand,
"Like to views ratio"= l_to_v_ratio)->for_table
# Create Table
reactable(
for_table,
pagination = FALSE,
defaultColDef = colDef(
cell = data_bars(for_table,
number_fmt = scales::percent_format(accuracy = .11))
)
)
tt %>% filter(brand == 'Bud Light')
youtube%>% filter(brand == 'Bud Light')
youtube%>% filter(brand == 'Bud Light', year = 2020)
youtube%>% filter(brand == 'Bud Light', year == 2020)
youtube%>% filter(brand == 'Bud Light', year == 2020) %>% View
# Like to view ration
youtube %>% filter(year == 2020) %>%
select(brand, title, where(is.numeric)) %>%
na.omit() %>%
group_by(brand,title) %>%
summarise(l_to_v_ratio =like_count/view_count) %>%
mutate(label=scales::percent(l_to_v_ratio,accuracy = 0.01)) %>%
ungroup() -> tt
# Create DF for table
tt %>%
select(brand,l_to_v_ratio) %>%
rename(Brand = brand,
"Like to views ratio"= l_to_v_ratio)->for_table
# Create Table
reactable(
for_table,
pagination = FALSE,
defaultColDef = colDef(
cell = data_bars(for_table,
number_fmt = scales::percent_format(accuracy = .11))
)
)
youtube %>% filter(year == 2020,brand='Kia')
youtube %>% filter(year == 2020,brand=='Kia')
youtube %>%
select(brand,year,view_count) %>%
rename(Brand = brand) %>%
group_by(Brand,year) %>%
summarise(Views=sum(view_count,na.rm = TRUE)) %>%
ungroup() %>%
mutate(year = paste0("'", str_sub(year, 3, 4))) %>%
pivot_wider(names_from = year,values_from = Views,values_fill=0) %>%
select(Brand,`'00`:`'14`,`'15`,`'16`,`'17`,`'18`,`'19`,`'20`)->heatmap
reactable(
heatmap,
compact = TRUE,
pagination = FALSE,
showSortIcon = FALSE,
defaultSorted = "'00",
defaultSortOrder = 'desc',
defaultColDef = colDef(
maxWidth = 60,
align = 'center',
cell = tooltip(number_fmt = scales::comma),
style = color_scales(heatmap, show_text = FALSE, span = TRUE,colors = viridis::viridis(2))
),
columns = list(
country = colDef(
maxWidth = 175,
align = 'left'
)
)
) %>%
add_title('Total Views Per Year') %>%
add_source('Data sourced from the tidy tuesday')
youtube %>%
select(where(is.numeric),-X,-category_id,-favorite_count) %>%
na.omit() %>%
cor() -> res
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) -> p
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous(labels=scales::number_format(scale = 100))+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.position = "none")+
ylab("View Count")+
xlab("Like Count")
# ## custom colors
my_pal <- rcartocolor::carto_pal(n = 8, name = "Bold")[c(1, 3, 7, 2,4,6,8,9,5,10)]
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous(labels=scales::number_format(scale = 100))+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.position = "none")+
ylab("View Count")+
xlab("Like Count")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous(labels=scales::number_format(scale = 100))+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
ylab("View Count")+
xlab("Like Count")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous(labels=scales::number_format(scale = 100))+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_text("Brand"))
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous(labels=scales::number_format(scale = 100))+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_text("Brand"))+
ylab("View Count")+
xlab("Like Count")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_jitter(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_continuous(labels=scales::number_format(scale = 100))+
scale_x_continuous(labels=scales::number_format(scale = 100))+
scale_color_manual(values = my_pal)+
theme_minimal() +
labs(color="Brand")+
ylab("View Count")+
xlab("Like Count")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10()+
scale_x_log10()+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10()+
scale_y_continuous(labels = scales::comma)+
scale_x_log10()+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels = scales::comma)+
scale_x_log10()+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels = scales::comma)+
scale_x_log10(labels = scales::comma)+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels = scales::comma)+
scale_x_log10(labels = scales::comma)+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("View Count")+
xlab("Like Count")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels = scales::comma)+
scale_x_log10(labels = scales::comma)+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("View Count")+
xlab("Like Count")+
labs(title = "Relationship between views and likes",
subtitle = "log scale")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels = scales::comma)+
scale_x_log10(labels = scales::comma)+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank())+
ylab("View Count")+
xlab("Like Count")+
labs(title = "Relationship between views and likes (log scale)")
youtube %>%
ggplot(aes(like_count,view_count, color=brand))+
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE, se=FALSE)+
scale_y_log10(labels = scales::comma)+
scale_x_log10(labels = scales::comma)+
scale_color_manual(values = my_pal)+
theme_minimal() +
theme(legend.title = element_blank(),
plot.title.position = 'plot')+
ylab("View Count")+
xlab("Like Count")+
labs(title = "Relationship between views and likes (log scale)")
library(highcharter)
hchart(log(youtube$view_count),breaks = 20, name="log(view count)", fill="midnightblue")
?hchart
res1 %>%
extract_fit_engine() %>%
summary() %>%
tidy()
youtube %>%
select(brand,
funny,
show_product_quickly,
patriotic,
celebrity,
danger,
animals,
use_sex,
view_count,
like_count,
dislike_count) -> for_modelling
# Define recipe:
youtube_recipe1 <- recipe(view_count~.,data=for_modelling) %>%
step_log(all_numeric(),signed = TRUE)
# Specify model:
lm_mod1 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow1  <- workflow() %>%
add_model(lm_mod1) %>%
add_recipe(youtube_recipe1)
youtube_workflow1 %>%
fit(data=youtube) -> res1
res1 %>%
extract_fit_engine() %>%
summary() %>%
tidy()
res1 %>%
extract_fit_engine() %>%
summary() %>%
tidy() %>%
filter()
res1 %>%
extract_fit_engine() %>%
summary() %>%
tidy() %>%
filter(p,value <= 0.05)
res1 %>%
extract_fit_engine() %>%
summary() %>%
tidy() %>%
filter(p.value <= 0.05)
# Workflow with interaction term:
# Define recipe:
youtube_recipe2 <- recipe(view_count~.,data=for_modelling) %>%
step_dummy(brand) %>%
step_interact(terms = ~ like_count:starts_with("brand"))
# Specify model:
lm_mod2 <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
# specify workflow:
youtube_workflow  <- workflow() %>%
add_model(lm_mod2) %>%
add_recipe(youtube_recipe2)
youtube_workflow %>%
fit(data=youtube) -> res2
res2 %>%
extract_fit_engine() %>%
summary()
# First Model
res2 %>%
extract_fit_engine() ->y
# Second Model
res1 %>%
extract_fit_engine()->x
# ANOVA Test of variance:
anova(x,y)
AIC(x,y)
?AIC
# Bake data set:
youtube_bootstrap <- recipe(view_count~.,data=for_modelling) %>%
step_log(all_numeric(),signed=TRUE) %>%
prep() %>%
bake(new_data=NULL)
# generate bootstrapped intervals
doParallel::registerDoParallel()
reg_intervals(view_count~.,
data = youtube_bootstrap,
times=1000) -> bootstrapped_model
gg_hpointrange(bootstrapped_model,
xmiddle_var = .estimate,
xmin_var = .lower,
xmax_var = .upper,
y_var = term,
x_title = "Effect size",
y_title = "",
title = "Boostrapped Interaction Model Terms Confidence Intervals")
# load Packages
pacman::p_load(tidyverse,corrplot,reactablefmtr,reactable,tidymodels,gt,simplevis)
gg_hpointrange(bootstrapped_model,
xmiddle_var = .estimate,
xmin_var = .lower,
xmax_var = .upper,
y_var = term,
x_title = "Effect size",
y_title = "",
title = "Boostrapped Interaction Model Terms Confidence Intervals")
bootstrapped_model
youtube %>%
select(where(is.numeric),-X,-category_id,-favorite_count) %>%
na.omit() %>%
cor() -> res
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45) -> p
gg_hpointrange(bootstrapped_model,
xmiddle_var = .estimate,
xmin_var = .lower,
xmax_var = .upper,
y_var = term,
x_title = "Effect size",
y_title = "",
title = "Boostrapped Interaction Model Terms Confidence Intervals")
gg_hpointrange(bootstrapped_model,
xmiddle_var = .estimate,
xmin_var = .lower,
xmax_var = .upper,
y_var = term,
x_title = "Effect size",
y_title = "",
title = "Boostrapped Interaction Model Terms Confidence Intervals")
bootstrapped_model
bootstrapped_model %>%
filter(term %in% c("brandKia","like_count","celebrityTRUE","brandToyota")) -> bootstrapped_model
gg_hpointrange(bootstrapped_model,
xmiddle_var = .estimate,
xmin_var = .lower,
xmax_var = .upper,
y_var = term,
x_title = "Effect size",
y_title = "",
title = "Boostrapped Interaction Model Terms Confidence Intervals")
